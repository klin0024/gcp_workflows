---
main:
  params: [event]
  steps:
  - init:
      assign:
      - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
      - instances: ${event.instances}
      - retain_days: ${event.retainDays}
      - current_unix_time: ${sys.now()}
      - expiration_unix_time: ${current_unix_time - (retain_days * 86400)}
      - current_datetime: ${time.format(current_unix_time,"Asia/Taipei")}
      - time_regexp: \d{2,4}
      - time: ${text.find_all_regex(current_datetime,time_regexp)}
      - postfix: ${time[0].match + "-" + time[1].match + "-" + time[2].match + "-" + time[3].match + "-" + time[4].match + "-" + time[5].match}
      - response:
          success: []
          fail: []
  - for_each_instances:
      for:
        value: instance
        in: ${instances}
        steps:
        - get_vars:
            assign:
              - gce_name: ${instance.name}
              - location: ${instance.location}
        - get_zone:
            call: get_zone_workflow
            args:
              project_id: ${project_id}
              gce_name: ${gce_name}
            result: gce_zone
        - instance_not_found:
            switch:  
            - condition: ${gce_zone == null}
              steps:
              - print_not_exists:  
                  call: sys.log
                  args:
                    text: ${gce_name + " Not Found"}
                    severity: "ERROR"
              - not_exists:
                  assign:
                  - response.fail: ${list.prepend(response.fail, gce_name)}
              - next_instance:    
                  next: continue
        - get_source_instance:
            assign:
              - source_instance: ${"https://www.googleapis.com/compute/v1/projects/" + project_id + "/zones/" + gce_zone + "/instances/" + gce_name}
        - backup:
            try:
              steps:
              - process:
                  call: backup_gce_workflow
                  args:
                    project_id: ${project_id}
                    source_instance: ${source_instance}
                    location: ${location}
                    gce_name: ${gce_name}
                    postfix: ${postfix}
              - success:
                  assign:
                  - response.success: ${list.prepend(response.success, gce_name)}
            except:
              as: e
              steps:
              - print_error:  
                  call: sys.log
                  args:
                    json: ${e}
                    severity: "ERROR"  
              - fail:
                  assign:
                  - response.fail: ${list.prepend(response.fail, gce_name)}
        - expiration:
            call: expiration_backup_workflow
            args:
              project_id: ${project_id}
              source_instance: ${source_instance}
              expiration_unix_time: ${expiration_unix_time}
  - job_completed:
      switch:
        - condition: ${len(response.fail) == 0}
          return: ${response}  
        - condition: true
          raise:
            code: 1
            message: ${response}
      

get_zone_workflow:
  params: [project_id,gce_name]
  steps:
  - get_global_instances: 
      call: googleapis.compute.v1.instances.aggregatedList
      args:
        project: ${project_id}
        filter: ${"name=\"" + gce_name + "\""}
      result: global_instances
  - for_each_zones:
      for:
        value: zone
        in: ${keys(global_instances.items)}
        steps:
        - instance_found:
            switch:
            - condition: ${"instances" in global_instances.items[zone]}
              return: ${text.split(zone, "/")[1]}
  - instance_not_found:
      return: null

backup_gce_workflow:
  params: [project_id,source_instance,location,gce_name,postfix]
  steps:
  - create_gce_backup: 
      call: googleapis.compute.v1.machineImages.insert
      args: 
        project: ${project_id}
        sourceInstance: ${source_instance}
        body:
          name: ${gce_name + "-" + postfix}
          storageLocations: ${location}
      result: insertResult
  - print_log:
      call: sys.log
      args:
        json: ${insertResult}
        severity: "NOTICE"

expiration_backup_workflow:
  params: [project_id,source_instance,expiration_unix_time]
  steps:
  - get_expiration_backup:
      call: googleapis.compute.v1.machineImages.list
      args:
        project: ${project_id}
      result: listResult
  - for_each_backups:
      for:
        value: backup
        in: ${listResult.items}
        steps:
        - filter_backup:
            switch:
            - condition: ${backup.sourceInstance == source_instance AND time.parse(backup.creationTimestamp) < expiration_unix_time}
              steps:
              - delete_backup:
                  call: googleapis.compute.v1.machineImages.delete
                  args:
                    machineImage: ${backup.name}
                    project: ${project_id}
                  result: deleteResult
              - print_log:  
                  call: sys.log
                  args:
                    json: ${deleteResult}
                    severity: "NOTICE"