main:
  params: [event]
  steps:
  - init:
      assign:
      - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
      - message: ${json.decode(base64.decode(event.data.message.data))}
      - resource_type: ${message.resource.type}
      - internal_ip: ${message.jsonPayload.healthCheckProbeResult.ipAddress}
  - get_gce_zone:
      switch:
      - condition: ${resource_type=="gce_instance_group"}
        steps:
        - gce_instance_group:
            assign:
            - gce_zone: ${message.resource.labels.location}
      - condition: ${resource_type=="gce_network_endpoint_group"}
        steps:
        - gce_network_endpoint_group:
            assign:
            - gce_zone: ${message.resource.labels.zone}
  - get_gce_instances: 
      call: googleapis.compute.v1.instances.list
      args:
        project: ${project_id}
        zone: ${gce_zone}
      result: gce_instances
  - for_each_instances:
      for:
        value: instance
        in: ${gce_instances.items}
        steps:
        - filter_instance:
            switch:
            - condition: ${instance.networkInterfaces[0].networkIP==internal_ip} 
              steps:
              - get_gce_name: 
                  assign:
                  - gce_name: ${instance.name}
              - reset_gce:
                  call: googleapis.compute.v1.instances.reset
                  args:
                    instance: ${gce_name}
                    project: ${project_id}
                    zone: ${gce_zone}
                  result: resetResult
              - print_result:
                  return: ${resetResult}