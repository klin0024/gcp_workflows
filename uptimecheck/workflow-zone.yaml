main:
  params: [event]
  steps:
  - init:
      assign:
      - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
      - message: ${json.decode(base64.decode(event.data.message.data))}
      - state: ${message.incident.state}
      - gce_name: ${message.incident.policy_user_labels.gce_name}
  - open:
      switch:
      - condition: ${state == "open"}
        steps:    
        - get_global_instances: 
            call: googleapis.compute.v1.instances.aggregatedList
            args:
              project: ${project_id}
              filter: ${"name = " + gce_name}
            result: global_instances
        - for_each_zones:
            for:
              value: zone
              in: ${keys(global_instances.items)}
              steps:
              - have_instances_key:
                  switch:
                  - condition: ${"instances" in global_instances.items[zone]}
                    steps:
                    - get_gce_instances:
                        assign: 
                        - gce_instances: ${global_instances.items[zone].instances}
                    - for_each_instances:
                        for:
                          value: instance
                          in: ${gce_instances}
                          steps: 
                          - filter_instance:
                              switch:
                              - condition: ${instance.name == gce_name}
                                steps:
                                - get_vars:
                                    assign:
                                    - gce_zone: ${text.split(instance.zone, "/")[8]}
                                - reset_gce:
                                    call: googleapis.compute.v1.instances.reset
                                    args:
                                      instance: ${gce_name}
                                      project: ${project_id}
                                      zone: ${gce_zone}
                                    result: resetResult
                                - print_result:
                                    return: ${resetResult}
